"""
1.	Написать программу, которая будет складывать, вычитать, умножать или делить
два числа. Числа и знак операции вводятся пользователем. После выполнения
вычисления программа не должна завершаться, а должна запрашивать новые данные
для вычислений. Завершение программы должно выполняться при вводе символа '0'
в качестве знака операции. Если пользователь вводит неверный знак
(не '0', '+', '-', '*', '/'), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции.
Также сообщать пользователю о невозможности деления на ноль,
если он ввел 0 в качестве делителя.
Подсказка:
Вариант исполнения:
- условие рекурсивного вызова - введена операция +, -, *, / - ШАГ РЕКУРСИИ
- условие завершения рекурсии - введена операция 0 - БАЗОВЫЙ СЛУЧАЙ
Пример:
Введите операцию (+, -, *, / или 0 для выхода): +
Введите первое число: 214
Введите второе число: 234
Ваш результат 448
Введите операцию (+, -, *, / или 0 для выхода): -
Введите первое число: вп
Вы вместо трехзначного числа ввели строку (((. Исправьтесь
Введите операцию (+, -, *, / или 0 для выхода):
Решите через рекурсию. Решение через цикл не принимается.
Для оценки Отлично в этом блоке необходимо выполнить 5 заданий из 7
"""


def int_input(txt):
    try:
        return int(input(txt))
    except ValueError:
        return int_input(txt)


def dev_input(txt):
    data = int_input(txt)
    if data == 0:
        print('Делить на 0 нельзя!')
        return dev_input(txt)
    else:
        return data


def input_check(txt, poss_val):
    data = input(txt)
    if data in poss_val:
        return data
    else:
        return input_check(txt, poss_val)


def calc():
    operation = input_check('Введите операцию (+, -, *, / или 0 для выхода): ', ['+', '-', '*', '/', '0'])
    if operation == '0':
        return
    else:
        first = int_input('Введите первое число: ')
        if operation == '/':
            second = dev_input('Введите второе число: ')
        else:
            second = int_input('Введите второе число: ')
        print(f'Результат: {eval(f"{first} {operation} {second}")}')
        calc()

calc()
